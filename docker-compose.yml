# Lunar Gateway - Local Development with Super Image
# Kong + Backend combined in a single container for consistency with production

services:
  postgres:
    image: postgres:15-alpine
    container_name: lunar-postgres
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
      POSTGRES_DB: kong
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - lunar-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migrations:
    image: kong:3.9.1
    container_name: lunar-kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    networks:
      - lunar-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure

  lunar-super:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: lunar-super
    environment:
      # Kong Database Configuration
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"

      # Backend Database Configuration (same as Kong)
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass

      # Kong URLs (internal to super container)
      KONG_ADMIN_URL: http://localhost:8001
      KONG_GATEWAY_URL: http://localhost:8000
      BACKEND_URL: http://localhost:5872

      # LLM Providers
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      OLLAMA_BACKEND_URL: ${OLLAMA_BACKEND_URL:-http://host.docker.internal:11434}
      OLLAMA_MODEL_NAME: ${OLLAMA_MODEL_NAME:-gpt-oss:120b}

      # Public endpoint
      LUNAR_ENDPOINT_URL: ${LUNAR_ENDPOINT_URL:-http://localhost:8000}

      # Blockchain
      BLOCKCHAIN_PRIVATE_KEY: ${BLOCKCHAIN_PRIVATE_KEY:-}
      BLOCKCHAIN_RPC_URL: ${BLOCKCHAIN_RPC_URL:-}
      BLOCKCHAIN_CONTRACT_ADDRESS: ${BLOCKCHAIN_CONTRACT_ADDRESS:-}
      STORE_FULL_REQUEST_RESPONSE: ${STORE_FULL_REQUEST_RESPONSE:-false}
    ports:
      # - "5872:5872"  # Backend/Dashboard (internal only - access via Kong at /admin)
      - "8000:8000"  # Kong Proxy
      - "8001:8001"  # Kong Admin API
    volumes:
      # Mount src for hot reload during development (comment out for production)
      - ./src:/app/src:ro
      - ./public:/app/public:ro
      - ./kong-plugins:/usr/local/kong/custom-plugins:ro
      - ./kong/kong.conf:/etc/kong/kong.conf:ro
    networks:
      - lunar-network
    depends_on:
      postgres:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "sh", "-c", "kong health && wget -q -O- http://localhost:5872/health"]
      interval: 30s
      timeout: 5s
      retries: 5

  kong-provisioner:
    image: alpine:latest
    container_name: lunar-kong-provisioner
    volumes:
      - ./kong/kong.yaml:/kong-template.yaml:ro
      - ./kong/provision.sh:/provision.sh:ro
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      BACKEND_URL: http://localhost:5872
      OLLAMA_BACKEND_URL: ${OLLAMA_BACKEND_URL:-http://host.docker.internal:11434}
      OLLAMA_MODEL_NAME: ${OLLAMA_MODEL_NAME:-gpt-oss:120b}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-changeme}
      KONG_ADMIN_URL: http://lunar-super:8001
      DECK_VERSION: v1.41.1
    command: >
      sh -c "
        apk add --no-cache curl gettext jq &&
        ARCH=$$(uname -m) &&
        if [ \"$$ARCH\" = \"x86_64\" ]; then ARCH=\"amd64\"; elif [ \"$$ARCH\" = \"aarch64\" ]; then ARCH=\"arm64\"; fi &&
        curl -sL https://github.com/kong/deck/releases/download/$${DECK_VERSION}/deck_$${DECK_VERSION#v}_linux_$${ARCH}.tar.gz | tar -xz -C /usr/local/bin &&
        sleep 5 &&
        /provision.sh
      "
    networks:
      - lunar-network
    depends_on:
      lunar-super:
        condition: service_healthy
    restart: on-failure

  test-runner:
    image: node:18-alpine
    container_name: lunar-test-runner
    working_dir: /app
    volumes:
      - ./tests:/app/tests:ro
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
      - ./node_modules:/app/node_modules:ro
    environment:
      # Test from inside Docker network
      KONG_ADMIN_URL: http://lunar-super:8001
      KONG_GATEWAY_URL: http://lunar-super:8000
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-changeme}
      NODE_OPTIONS: --experimental-vm-modules
      TEST_INTERNAL: "true"
    networks:
      - lunar-network
    depends_on:
      lunar-super:
        condition: service_healthy
      kong-provisioner:
        condition: service_completed_successfully
    command: npx jest tests/internal.test.js
    profiles:
      - test

volumes:
  postgres-data:

networks:
  lunar-network:
    driver: bridge
